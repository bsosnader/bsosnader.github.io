<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brenden Sosnader</title>
    <description>Hi, I'm Brenden Sosnader. I'm a student studying computer science and statistics at the Schreyer Honors College at Penn State.
</description>
    <link>http://sosnader.tk/</link>
    <atom:link href="http://sosnader.tk/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 13 Sep 2018 15:19:12 -0400</pubDate>
    <lastBuildDate>Thu, 13 Sep 2018 15:19:12 -0400</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>Nearby: Crowdsourced Fun</title>
        <description>&lt;p&gt;This past spring, I took Penn State’s CMPSC 431W - Database Management Systems class. The class is meant to be a senior year, capstone class, so a major part of the grading process is a semester-long group project focused on full-stack development.&lt;/p&gt;

&lt;p&gt;My group’s idea was a crowd-sourced web application to for nearby events, meetups, or giveaways. The intention would be for users to post events that they walked by, or knew were happening somewhere close by. Then, other users would vote on the events so people could see the popular things going on around them. It would all be based on the user’s location. We knew we were being kind of ambitious for the amount of time we had, but we thought it was a really cool idea so we went with it!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We first had to go through the typical steps that any software development project should go through at the beginning–writing functional specifications and sketching out the structure and layout of the application–before starting any coding. For me, this was great experience for working in a real development environment. Often, personal projects will just get slapped together a little bit too quickly, when some initial planning could have made things much easier.&lt;/p&gt;

&lt;p&gt;Through the planning process, we settled on a system framework.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/sys_framework.png&quot; alt=&quot;framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I primarily did the work on the frontend. I had a fair amount of experience with Angular from my previous internship, so it made sense to use it again on this project. I thought it would be a breeze, but I actually ran into a few interesting issues to tackle and learn about throughout the implementation.&lt;/p&gt;

&lt;h1 id=&quot;location&quot;&gt;Location&lt;/h1&gt;

&lt;p&gt;One of the biggest features of the application was that it was location-based. Everything revolved around seeing &lt;em&gt;nearby&lt;/em&gt; events–you wouldn’t really care about something going on 50 miles away. So one of the most important features of the project was to be able to actually get that information from the user.&lt;/p&gt;

&lt;p&gt;There’s supposed to be a built-in API in the browser for doing it, and the code is simple enough:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geolocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCurrentPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, what I found was that often during testing, and less frequently in a live environment, the API just wouldn’t work. There wasn’t really a clear explanation why it would happen, and it persisted even after fiddling with several different settings.&lt;/p&gt;

&lt;p&gt;I decided that a efficient and easy fallback would be to simply ask for the user’s zipcode if the location request didn’t go through. That way, a user could still use the app even if the API failed or if they didn’t want to share their exact location.&lt;/p&gt;

&lt;h1 id=&quot;user-authentication&quot;&gt;User Authentication&lt;/h1&gt;

&lt;p&gt;This project was the first time I had actually had to implement something more than just a simple authentication window in an application. Fortunately, using JSON Web Tokens made it extremely easy to authenticate users and store their tokens for persistent login.&lt;/p&gt;

&lt;p&gt;One thing that caused a wrinkle here was that our app’s components had different functionalities and looks depending on if a user was logged in or not. It was initially challenging to find a way to ensure that every component that needed to would update when a user logged in or out.&lt;/p&gt;

&lt;p&gt;To fix this I made use of Angular’s &lt;a href=&quot;https://angular.io/guide/component-interaction#parent-and-children-communicate-via-a-service&quot;&gt;shared service&lt;/a&gt; concept. Basically, every time a login or logout event was emitted, it would broadcast that through the service to all other components subscribed to that service. That way, I could basically have a communication path between components that would allow for them to listen for those events.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;From this project I got a lot more experience with Angular and with working in a group. Collaborating with the backend group members, building up features and interactions, and linking everything together was exciting and educational.&lt;/p&gt;

&lt;p&gt;The app is no longer online because we didn’t want to pay for hosting, but you’ll find some screenshots below!&lt;/p&gt;

&lt;div class=&quot;slider&quot;&gt;
  &lt;div&gt;&lt;a href=&quot;/img/projects/nearby/1.png&quot;&gt;&lt;img src=&quot;/img/projects/nearby/1.png&quot; alt=&quot;nearby screenshot&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;div&gt;&lt;a href=&quot;/img/projects/nearby/2.png&quot;&gt;&lt;img src=&quot;/img/projects/nearby/2.png&quot; alt=&quot;nearby screenshot&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;div&gt;&lt;a href=&quot;/img/projects/nearby/3.png&quot;&gt;&lt;img src=&quot;/img/projects/nearby/3.png&quot; alt=&quot;nearby screenshot&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;div&gt;&lt;a href=&quot;/img/projects/nearby/4.png&quot;&gt;&lt;img src=&quot;/img/projects/nearby/4.png&quot; alt=&quot;nearby screenshot&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 10 Sep 2018 00:00:00 -0400</pubDate>
        <link>http://sosnader.tk/technology/2018/09/10/nearby-web-app-project.html</link>
        <guid isPermaLink="true">http://sosnader.tk/technology/2018/09/10/nearby-web-app-project.html</guid>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>My Summer Internship</title>
        <description>&lt;p&gt;This summer, I had the pleasure of working at HighPoint Solutions in their Outsourcing department. The entire summer I was working on a project they assigned to one other intern and me.&lt;/p&gt;

&lt;p&gt;The project was a pretty cool and unique one. Since HighPoint is consulting company, they have to fill out a lot of Request For Proposal (RFP) documents to send to prospective clients. RFPs are basically a list of questions a company will send to other companies who want to help them outsource something. The other companies fill out their answers to these questions and send them back, and then there’s a bidding process which ultimately ends in one particular company being selected for the outsourcing (in our case, hopefully HighPoint!).&lt;/p&gt;

&lt;p&gt;As you might imagine, a large amount of these questions end up being very similar from company to company. HighPoint wanted a way to easily search for questions from past RFP documents that contained similar keywords to questions they wanted to answer. Previously, their only way of doing this would be to open each individual RFP document and search for the questions/keywords on a document by document basis. What the envisioned was a search bar where they could copy and paste a question, and get a list of previous questions and answers similar to that question, along with some metadata tags, like what original document it came from, or the date it was submitted.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Our managers gave us pretty much free reign to build whatever we wanted, as long as it had the functional specs they were looking for. The first thing we did on our own was separate the project into the three distinct parts that seemed clear to us. First, we knew we needed to make some sort of parser that could extract the questions and answers from RFP documents. Second, we needed a way to store those entries in a way that was easily searchable. Finally, we needed a UI that wrapped everything together and allowed for searching and uploading of documents.&lt;/p&gt;

&lt;h1 id=&quot;the-parser&quot;&gt;The parser&lt;/h1&gt;

&lt;p&gt;The parser was written in Java, mainly because we wanted to use &lt;a href=&quot;https://poi.apache.org/&quot;&gt;Apache POI&lt;/a&gt;, a really good API for parsing Microsoft documents. We figured the simplest way to extract the data was to have users highlight questions, and color answers red. This way, the parser could easily pair them together. We put the parser on a Java servlet which accepted http POST requests containing metadata tags and the document.&lt;/p&gt;

&lt;h1 id=&quot;the-database&quot;&gt;The database&lt;/h1&gt;

&lt;p&gt;SQL Databases are great for a lot of things, but fast full-text search isn’t really one of them. For that, we needed a search engine, something that could index the text really well and allow for fast and complex queries to be made to our text. &lt;a href=&quot;elastic.co&quot;&gt;Elasticsearch&lt;/a&gt; fit the bill while also being open source and well-documented (big relief). Elasticsearch is a search engine built on top of Apache Lucene that is truly fantastic– it had all of the features I needed to easily filter and manipulate the data and was fast and easy to learn.&lt;/p&gt;

&lt;h1 id=&quot;the-front-end&quot;&gt;The front-end&lt;/h1&gt;

&lt;p&gt;When thinking about what to use for the web front-end, I thought a lot about what we needed to be able to do and display. I knew that there would be a lot of API calls and HTTP GET / POST requests, as well as a need for dynamic results, options, and forms. &lt;a href=&quot;http://angular.io/&quot;&gt;Angular&lt;/a&gt;, which I’ve worked with a little bit before, seemed to be well-suited to the task. And it really, really was. From the pipes allowing me to easily separate and display what data Elasticsearch gave me, to the modularity of the components and the sensibility of using services, Angular really let us do everything we wanted to.&lt;/p&gt;

&lt;h1 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h1&gt;

&lt;p&gt;Once we had these components all working, it was time to put them together and deploy them for production use. We put the Java servlet and the web front-end on an Apache Tomcat web server (it amazes me how many different libraries and products Apache has), and the ES instance on its own platform. There were a few tricky things here, like linking up Tomcat with the company’s domain controller to authenticate users in Active Directory, but otherwise this part went smoothly. We were working pretty much up until the last few days, which were then spent making sure everything was well documented and ready to be passed on.&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;Overall, the internship was a ton of fun and exposed me to the real world of software development. We were given functional specs for a project, and had to accomplish our goals while being involved in regular meetings and updates on our progress. We had to adhere to company restrictions and policies for building software, and had to make sure our project was what the company really needed. At the end of the summer, the Senior Vice President of our department said it was the best intern project he’d ever seen, which was incredible to hear.&lt;/p&gt;

&lt;p&gt;Below is a screenshot of a search result from the app. It looks simple, but the work that went into making it happen was much more than simple.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/blurry.png&quot; alt=&quot;app image&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://sosnader.tk/technology/2017/08/21/my-summer-internship.html</link>
        <guid isPermaLink="true">http://sosnader.tk/technology/2017/08/21/my-summer-internship.html</guid>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>Visualizing Penn State's Daily Gym Attendance</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/posts/gym.jpg&quot; alt=&quot;white building &quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;notice-as-of-summer-2018-penn-state-has-taken-down-the-website-i-used-to-scrape-data-from-so-the-graph-doesnt-work-anymore--also-turns-out-i-dont-have-any-full-size-screenshots-saved-anymore-so-enjoy-this-blurry-thumbnail-of-the-final-product&quot;&gt;Notice: As of Summer 2018, Penn State has taken down the website I used to scrape data from, so the graph doesn’t work anymore. :( Also, turns out I don’t have any full-size screenshots saved anymore, so enjoy this blurry thumbnail of the final product&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/fitness.png&quot; alt=&quot;fitness thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re a Penn State student who likes to exercise, you know that the three on-campus gyms can get &lt;em&gt;really&lt;/em&gt; crowded. It sometimes seems like you have to get there immediately at opening time if you want to get a peaceful, uninterrupted workout in. It’s to be expected–although three gyms is a lot, 46,000 students is even more. The University recognizes that this can be a problem, and takes a count of students entering and exiting each gym, uploading it to a &lt;a href=&quot;https://studentaffairs.psu.edu/CurrentFitnessAttendance/&quot;&gt;really neat webapp&lt;/a&gt; where you can see how crowded each gym is. But that doesn’t really help you plan–you can only see what’s happening in the moment. Sure, eventually if you check it enough you get used to knowing when the crowds come and go, but it’d be a lot more useful (and interesting) to see attendance charted over time. So I decided to do just that.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;breaking-it-down&quot;&gt;Breaking it down&lt;/h1&gt;

&lt;p&gt;I expected this to be a fairly large project, so I had to separate it into manageable chunks. I decided to work on actually obtaining the data first, and left the front-end visualization for later. I knew I’d need to store it in some kind of database as well, but I had to figure out how to actually &lt;em&gt;get&lt;/em&gt; the data I wanted.&lt;/p&gt;

&lt;h1 id=&quot;the-scraper&quot;&gt;The Scraper&lt;/h1&gt;

&lt;p&gt;The first thing I tried was looking in the source code for any clues as to how the page was getting its data. I quickly found the &lt;a href=&quot;https://studentaffairs.psu.edu/CurrentFitnessAttendance/api/CounterAPI&quot;&gt;API link&lt;/a&gt;, but, unfortunately, it wouldn’t let me access it. Next, I tried to use the python module &lt;a href=&quot;https://www.crummy.com/software/BeautifulSoup/&quot;&gt;beautifulsoup&lt;/a&gt; to scrape and parse the html. That didn’t work either, for an obvious reason–the page was rendered using javascript, and beautifulsoup alone can’t get the javascript-rendered html–it can only get the basic html which didn’t have the values I wanted.&lt;/p&gt;

&lt;p&gt;Instead, I had to set up a headless browser using selenium and phantomJS in my python browser. What the headless browser does is basically go to the webpage and pretend to be a regular browser, like Chrome, so that the page will render its javascript. Then you can pass the rendered html over to beautifulsoup and commence the parsing. The code is super simple, too:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'http://example.com'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhantomJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then you can use the soup object to extract whatever data you need, and you’re set! You just need to make sure you have phantomJS installed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;phantomjs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also make sure to include the proper imports at the top of the python file:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You’ll probably want regex as well:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now that I had a reliable way of scraping data from the website, I needed to figure out how to store it.&lt;/p&gt;

&lt;h1 id=&quot;the-database&quot;&gt;The Database&lt;/h1&gt;

&lt;p&gt;The selection of a databse for this project was actually something that took me a bit of time to consider. I couldn’t really use a regular relational database because it didn’t make much sense. It’s not like I’m storing lists of users, where each row is a distinct user with distinct fields. I really only have three distinct ‘things’–the three gyms. Each gym has attendance values and a timestamp associated with that value. For that kind of setup, a time series database should be used. Time series databases are built for this exact scenario and make it easy to organize the data.&lt;/p&gt;

&lt;p&gt;I chose to use &lt;a href=&quot;https://www.influxdata.com/&quot;&gt;InfluxDB&lt;/a&gt; because it was free, had good documentation, and seemed to have all the features I was looking for without being unnecessarily complex or bloated. It has extensive libraries for many languages, and it was really easy to link to python. All I had to do was convert my html from earlier to a JSON format dict and use it in the following code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8086&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'user'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json_body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# this is my function from the scraper class&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InfluxDBClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_retention_policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'policy_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'7d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'example code to play with InfluxDB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hostname of InfluxDB http API'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--port'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8086&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'port of InfluxDB http API'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I got all of that working on my laptop, and now had a python script I could run to consistently add data to the database. The next step was getting data in regular intervals. I needed to set up a server.&lt;/p&gt;

&lt;h1 id=&quot;the-server&quot;&gt;The Server&lt;/h1&gt;

&lt;p&gt;As a cheap college student, I never want to spend money if I don’t absolutely have to. For instance, this website is hosted by &lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt; entirely for free, as is my &lt;a href=&quot;http://sosnader.tk/grade-calc/&quot;&gt;Grade Calculator&lt;/a&gt; project. But, github pages is just a simple static host for frontend content. I needed a real machine to run my database on.&lt;/p&gt;

&lt;p&gt;Before making the jump to buying a VPS though, I first pulled out my dusty old Raspberry Pi Model A. After a &lt;em&gt;lot&lt;/em&gt; of tweaking and fiddling, I got the database set up on a headless installation of raspbian. There’s not too much to talk about here. After installing InfluxDB, Python 3, and all their respective dependencies, I added a simple cron job add data every ten minutes.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/10 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; bash &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/home/brenden/psu-fitness/database.py'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /home/brenden/logs/cron.log 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once I verified that my setup was working correctly, I grabbed a server from &lt;a href=&quot;https://www.vultr.com/&quot;&gt;Vultr&lt;/a&gt; and replicated my setup. Originally, I planned on only hosting the database in the VPS, and putting the front end on github pages. However, I figured since I already had the server I might as well use it as the web server as well. I’ve never configured my own web server from scratch before anyway, so I viewed it as a new challenge.&lt;/p&gt;

&lt;p&gt;Configuration was actually super easy. I installed nginx and set up a configuration file. The config file had two key parts. The first part told the server where to look to find the html files to serve to port 80. THe second part told the server where to look if someone queried the database, which, for InfluxDB, takes the form of:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://servername:8086/query?your-query-here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I didn’t want to have that silly 8086 there so I set up a reverse proxy to point any requests to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://servername/query
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to port 8086 and to the database. InfluxDB has some basic authentication built in, and I’m not too worried about anyone hacking into my database. They wouldn’t find anything anyway, and I took enough basic steps I feel to stop any bot or casual hacker from doing something they shouldn’t.&lt;/p&gt;

&lt;p&gt;Speaking of security, I also decided to add SSL support to the site. I was expecting this to be a huge hassle, but luckily &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let’s Encrypt&lt;/a&gt; offers a super painless way to set up SSL support on a web server. I just had to change my nginx configuration file a little bit and run the tool that Let’s Encrypt supplies and I was good to go.&lt;/p&gt;

&lt;h1 id=&quot;the-front-end&quot;&gt;The Front End&lt;/h1&gt;

&lt;p&gt;The final part of this challenge was the front end. I wanted to go barebones this time–I didn’t think I needed any sort of Angular framework or the like. I just wanted a simple page to display the graph and some info and nothing else. &lt;a href=&quot;http://chartjs.org&quot;&gt;ChartJS&lt;/a&gt; is a great, simple JavaScript charting library that I was easily able to adapt to my purposes. After whipping a few styles together along with the &lt;a href=&quot;http://getskeleton.com&quot;&gt;Skeleton CSS Framework&lt;/a&gt; (a new favorite of mine), the site was finally ready to deploy! You can view it at &lt;a href=&quot;https://fitnessdb.tk&quot;&gt;https://fitnessdb.tk&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-i-learned&quot;&gt;What I Learned&lt;/h1&gt;

&lt;p&gt;This project took a few weeks of my time, but the efforts were more than worth it. Not only did I create something that’s sorta cool, I also learned a ton about a bunch of different technologies in the process. I got a &lt;em&gt;lot&lt;/em&gt; more comfortable with databases than I have been in the past. I really had never used or configured a database up until this point, and this project was a great way to learn in a hands on approach.&lt;/p&gt;

&lt;p&gt;I also got better with using external Python and JavaScript libraries. Documentation can often be sparse and unreadable, and I definitely learned how to adapt and twist things to do what I wanted them to do.&lt;/p&gt;

&lt;p&gt;Funnily enough, I think what I learned the &lt;em&gt;most&lt;/em&gt; about through this project was the linux shell. I had to use it extensively to configure the servers, run commands, and test things. I got far more comfortable with it than I had been before, and I think those skills will really help my productivity in the future.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Apr 2017 00:00:00 -0400</pubDate>
        <link>http://sosnader.tk/technology/2017/04/13/visualizing-penn-states-gym-attendance.html</link>
        <guid isPermaLink="true">http://sosnader.tk/technology/2017/04/13/visualizing-penn-states-gym-attendance.html</guid>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>Making a Webapp with Angular</title>
        <description>&lt;p&gt;It hadn’t yet been a day since I’d been home for winter break, and I already had grown bored of just sitting around. Sure, we all dream of the promised land after the semester is over, where there are no responsibilities and no homework, and where finals are nothing but a faint memory in our heads, but in reality, it gets old, fast.&lt;/p&gt;

&lt;p&gt;Speaking of finals, though, there’s a peculiar phenonenom the seems to occur during the last week or so of the semester—college students, instead of studying, will inevitably spend all of their free time calculating the lowest possible grade they can get on their finals to still get the grade they want in their classes. I’m not immune to it myself—it’s fun, and quite frankly relieving, to discover you only need a 65% on your CS final to get an A in the course. And if you look online, you’ll find there’s plenty of websites that do the calculations for you. I decided to make one too.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I wanted to cure my boredom and learn at the same time, so I decided to make it using something I haven’t really had experience with before: &lt;a href=&quot;https://angular.io&quot;&gt;Angular&lt;/a&gt;. Although this idea has been done plenty of times before, I thought it would be a nice way to experiment with Angular. You can find the finished project &lt;a href=&quot;http://sosnader.tk/grade-calc&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I faced a few challenges in getting this project up and running, but all in all it only took me the better part of a Sunday afternoon. The biggest challenge that I had to overcome was to actually figure out how Angular worked. I had really never touched any sort of Javascript framework before this point and I didn’t really understand the concept. After going through some tutorials and example code on the Angular website, I felt ready enough to tackle the project.&lt;/p&gt;

&lt;p&gt;The Angular team makes it really easy to get a project up and running with the &lt;a href=&quot;https://cli.angular.io/&quot;&gt;angular-cli&lt;/a&gt; tool. After running their setup, all I had to do was configure a few components, set up my form and calculations, and apply some styles. It’s pretty barebones, but it got me to learn the basics of what Angular is all about, and I’m excited to be be able to use its tools in future projects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sosnader.tk/grade-calc&quot;&gt;&lt;img src=&quot;/img/posts/grade.png&quot; alt=&quot;grade app screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 00:00:00 -0500</pubDate>
        <link>http://sosnader.tk/technology/2016/12/18/making-a-webapp-with-angularjs.html</link>
        <guid isPermaLink="true">http://sosnader.tk/technology/2016/12/18/making-a-webapp-with-angularjs.html</guid>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>Installing GalliumOS on a Toshiba Chromebook 2 (2015)</title>
        <description>&lt;p&gt;Ever since Apple declined to release new Retina Macbook Pros at WWDC 2016, I’ve been on the hunt for a laptop to tide me over until the eventual release sometime in the fall. While I don’t exactly &lt;em&gt;need&lt;/em&gt; a new laptop just yet (after all, the lab computers at Penn State would be perfectly serviceable for the first few months of my first semester) I decided I would prefer to have something portable to take to class. I wasn’t planning on breaking the bank, so I settled on a Chromebook, and after researching a bit (with the help of &lt;a href=&quot;http://reddit.com/r/chromeos&quot;&gt;Reddit&lt;/a&gt;) I settled on a &lt;a href=&quot;https://www.amazon.com/Toshiba-Chromebook-CB35-C3300-Backlit-Keyboard/dp/B015806LMM&quot;&gt;Toshiba Chromebook 2&lt;/a&gt;, the 2015 edition with the backlit keyboard and 1920x1080 IPS screen. I was able to find a great deal on a refurbished one for $230.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;One of the reasons Chromebooks are so cheap is that they aren’t often built with high-powered components. My version came with a 1.7 GHz Celeron processor, 4 GB of ram, and a 16 GB SSD. Most limiting, however, it came installed with ChromeOS. ChromeOS, while great for casual web browsing, doesn’t offer much when it comes to setting up a dev environment. While there are options for setting up a full linux environment within ChromeOS (see: &lt;a href=&quot;https://github.com/dnschneid/crouton&quot;&gt;Crouton&lt;/a&gt;), I decided I didn’t want ChromeOS a single bit.&lt;/p&gt;

&lt;p&gt;Yet, I had to give ChromeOS credit where credit was due. Because it’s so lightweight and its kernel is so optimized, it runs great on the limited hardware most Chromebooks provide. While installing full Linux (and even Windows!) is possible, it’s not always the best, performance-wise, and battery life can take a hit. Adding to the complexity, often it’s a pain to set up drivers and keyboard shortcuts to get your hardware working properly on the new OS.&lt;/p&gt;

&lt;p&gt;That’s where  &lt;a href=&quot;https://galliumos.org/&quot;&gt;GalliumOS&lt;/a&gt; comes in. I found GalliumOS after searching around a bit, and reading the description convinced me it was what I needed. It’s super lightweight, and optimized almost as much as ChromeOS is, utilizing drivers and core files from the ChromeOS kernel itself to run near seamlessly on many popular Chromebooks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/gallium.png&quot; alt=&quot;GalliumOS Homepage&quot; /&gt;
&lt;em&gt;the GalliumOS homepage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There’s a few options when it comes to actually installing GalliumOS. The least invasive involves using a utility called &lt;a href=&quot;https://chrx.org/&quot;&gt;chrx&lt;/a&gt;. There’s a simple step-by-step process which involves enabling Developer Mode (more on that later), running a script to flash the firmware, and then running another script to install GalliumOS alongside ChromeOS.&lt;/p&gt;

&lt;p&gt;Like I said before however, I didn’t want to see ChromeOS &lt;em&gt;at all.&lt;/em&gt; Not to mention there’s other problems with going the dual-boot route. You’ll see a scary white screen warning you of the terrible damage you’ve done to your system (not really) and you’ll always have to enter either &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+L&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+D&lt;/code&gt; to enter GalliumOS or ChromeOS, repsectively. And there’s a few minor graphical glitches while booting up. 
&lt;img src=&quot;/img/posts/osv.png&quot; alt=&quot;os verification example&quot; /&gt;
&lt;em&gt;example of the scary white screen&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While these may be only minor annoyances, bearable to those who don’t want to mess with their system &lt;em&gt;too&lt;/em&gt; much, I knew I wanted to go the more permanent route, which involves completely flashing the BIOS and installing the GalliumOS .iso from a flash drive. Below are the steps I took.&lt;/p&gt;

&lt;h1 id=&quot;preparations&quot;&gt;Preparations&lt;/h1&gt;

&lt;p&gt;Before I could get around to actually installing GalliumOS, I needed to get my Chromebook ready. The first thing I did was install a new 128 GB SSD, following &lt;a href=&quot;http://www.codedonut.com/chromebook/upgrade-ssd-toshiba-chromebook-2/&quot;&gt;this guide&lt;/a&gt;. It’s a little scary opening up the Chromebook, but using a plastic spudger tool and starting at the hinges of the laptop made it much easier than expected.&lt;/p&gt;

&lt;p&gt;Once inside, I replaced the SSD and removed the hardware write protect screw. Removing this screw and the metallic circle underneath is necessary to allow proper flashing of the BIOS. &lt;a href=&quot;https://plus.google.com/105587851792537311339/posts/XhTMN2zdkHG&quot;&gt;There are pictures of the inside here&lt;/a&gt;. The screw to remove is right next to the SSD and wifi card.&lt;/p&gt;

&lt;p&gt;After restoring ChromeOS, I powered off the device and pressed &lt;code class=&quot;highlighter-rouge&quot;&gt;Esc+Refresh+Power&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+D&lt;/code&gt; to put the device into Developer Mode, which allows changes to be made to the core files. After 15 minutes or so, my laptop rebooted and I pressed &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+D&lt;/code&gt; to get into ChromeOS for the last time.&lt;/p&gt;

&lt;h1 id=&quot;flashing-the-bios&quot;&gt;Flashing the BIOS&lt;/h1&gt;

&lt;p&gt;This step couldn’t have been simpler. I used coolstar’s Full ROM which included fixes for the graphical issues and removed the scary white screen. &lt;strong&gt;Important:&lt;/strong&gt; this also removes the ability to boot ChromeOS, meaning it is possible to brick your device. You can still recover it, but it’s a bit of a process.&lt;/p&gt;

&lt;p&gt;Anyway, while I was in ChromeOS, I opened up a Chrome tab, pressed &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Alt+T&lt;/code&gt;, typed “shell,” and then &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt; and then pasted the following command into the prompt and pressed enter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; https://mrchromebox.tech/firmware-util.sh&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash firmware-util.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, if you’ve suddenly decided you want to install Windows instead, you can continue with &lt;a href=&quot;https://coolstar.org/chromebook/windows-install.html&quot;&gt;coolstar’s guide&lt;/a&gt;. Otherwise, it’s time to make a bootable USB drive of GalliumOS.&lt;/p&gt;

&lt;h1 id=&quot;installing-galliumos&quot;&gt;Installing GalliumOS&lt;/h1&gt;

&lt;p&gt;I used &lt;a href=&quot;https://sourceforge.net/projects/win32diskimager/&quot;&gt;Win32DiskImager&lt;/a&gt;) to make my flash drive after downloading the GalliumOS .iso from their website. All I needed to do to install was plug it in and reboot my device. After following a few onscreen prompts, GalliumOS was installed!&lt;/p&gt;

&lt;h1 id=&quot;customizing-galliumos&quot;&gt;Customizing GalliumOS&lt;/h1&gt;

&lt;p&gt;GalliumOS is based on Xubuntu, and while it looks and acts pretty great out of the box, there’s a couple things I did to make it prettier and more functional.&lt;/p&gt;

&lt;p&gt;Clicking the GalliumOS icon in the bottom left corner brings up a sort of Start Menu. From there, I navigated to Settings, and then Keyboard, and binded &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Alt+T&lt;/code&gt; to the command &lt;code class=&quot;highlighter-rouge&quot;&gt;xfce4-terminal&lt;/code&gt;, which opens the Terminal.&lt;/p&gt;

&lt;p&gt;I installed &lt;a href=&quot;http://www.webupd8.org/2015/01/albert-fast-lightweight-quick-launcher.html&quot;&gt;Albert&lt;/a&gt; which is a task launcher kind of like Synapse or Alfred. I binded it to &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+A&lt;/code&gt; and messed around with the functionality. Since the Toshiba Chromebook doesn’t have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Super&lt;/code&gt; key, I wanted something to quickly launch applications.&lt;/p&gt;

&lt;p&gt;I also installed &lt;a href=&quot;http://linrunner.de/en/tlp/tlp.html&quot;&gt;TLP&lt;/a&gt;, which is supposed to improve battery life. I haven’t really been able to test how well my battery is in GalliumOS, but I have not noticed it draining any quicker than I would have expected. TLP is in the Ubuntu repo for 16.04 so all it needs is a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get intall tlp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I moved the bottom panel to the top, shrunk it a bit, and removed the functionality that showed open windows. Then I installed &lt;a href=&quot;https://launchpad.net/plank&quot;&gt;Plank&lt;/a&gt; to get more of an OSX feel.&lt;/p&gt;

&lt;p&gt;After installing Chrome, I made shortcuts to my Chrome Apps and added them to Plank. Now, even when I’m offline I can edit documents using Google Docs and access my files in Google Drive.&lt;/p&gt;

&lt;p&gt;I’ve been a member of &lt;a href=&quot;http://desktoppr.co&quot;&gt;Desktoppr.co&lt;/a&gt; for a while now, and I’ve amassed a pretty large selection of beautiful wallpapers. It’s really simple to get a slideshow of wallpapers in the XFCE environemnt. I just right clicked (clicked the touchpad with two fingers) on the desktop, selected to customize it, chose the folder where I downloaded my wallpapers, and checked the box to shuffle wallpapers with a timer. The end result of all this is pretty great.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/desktop.png&quot; alt=&quot;Desktop screenshot&quot; /&gt;
&lt;em&gt;my customized linux setup&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And that’s it! I’m completely happy with my laptop, and I’m even second-guessing whether or not I’ll really need the new Macbook Pro when it comes out. This little thing looks beautiful and I haven’t run into any hiccups or slowdowns yet. Certainly a great deal for only $280.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 -0400</pubDate>
        <link>http://sosnader.tk/technology/2016/07/11/installing-galliumos-on-chromebook.html</link>
        <guid isPermaLink="true">http://sosnader.tk/technology/2016/07/11/installing-galliumos-on-chromebook.html</guid>
        
        
        <category>technology</category>
        
      </item>
    
  </channel>
</rss>
